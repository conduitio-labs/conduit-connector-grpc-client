// Code generated by MockGen. DO NOT EDIT.
// Source: stream_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	v1 "github.com/conduitio/conduit-connector-protocol/proto/opencdc/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockStreamServiceClient is a mock of StreamServiceClient interface.
type MockStreamServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamServiceClientMockRecorder
}

// MockStreamServiceClientMockRecorder is the mock recorder for MockStreamServiceClient.
type MockStreamServiceClientMockRecorder struct {
	mock *MockStreamServiceClient
}

// NewMockStreamServiceClient creates a new mock instance.
func NewMockStreamServiceClient(ctrl *gomock.Controller) *MockStreamServiceClient {
	mock := &MockStreamServiceClient{ctrl: ctrl}
	mock.recorder = &MockStreamServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamServiceClient) EXPECT() *MockStreamServiceClientMockRecorder {
	return m.recorder
}

// Stream mocks base method.
func (m *MockStreamServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stream", varargs...)
	ret0, _ := ret[0].(StreamService_StreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stream indicates an expected call of Stream.
func (mr *MockStreamServiceClientMockRecorder) Stream(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockStreamServiceClient)(nil).Stream), varargs...)
}

// MockStreamService_StreamClient is a mock of StreamService_StreamClient interface.
type MockStreamService_StreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamService_StreamClientMockRecorder
}

// MockStreamService_StreamClientMockRecorder is the mock recorder for MockStreamService_StreamClient.
type MockStreamService_StreamClientMockRecorder struct {
	mock *MockStreamService_StreamClient
}

// NewMockStreamService_StreamClient creates a new mock instance.
func NewMockStreamService_StreamClient(ctrl *gomock.Controller) *MockStreamService_StreamClient {
	mock := &MockStreamService_StreamClient{ctrl: ctrl}
	mock.recorder = &MockStreamService_StreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamService_StreamClient) EXPECT() *MockStreamService_StreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockStreamService_StreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockStreamService_StreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStreamService_StreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockStreamService_StreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamService_StreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamService_StreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockStreamService_StreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockStreamService_StreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStreamService_StreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockStreamService_StreamClient) Recv() (*Ack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Ack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreamService_StreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreamService_StreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamService_StreamClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamService_StreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamService_StreamClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreamService_StreamClient) Send(arg0 *v1.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamService_StreamClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamService_StreamClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreamService_StreamClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamService_StreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamService_StreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockStreamService_StreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockStreamService_StreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStreamService_StreamClient)(nil).Trailer))
}

// MockStreamServiceServer is a mock of StreamServiceServer interface.
type MockStreamServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamServiceServerMockRecorder
}

// MockStreamServiceServerMockRecorder is the mock recorder for MockStreamServiceServer.
type MockStreamServiceServerMockRecorder struct {
	mock *MockStreamServiceServer
}

// NewMockStreamServiceServer creates a new mock instance.
func NewMockStreamServiceServer(ctrl *gomock.Controller) *MockStreamServiceServer {
	mock := &MockStreamServiceServer{ctrl: ctrl}
	mock.recorder = &MockStreamServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamServiceServer) EXPECT() *MockStreamServiceServerMockRecorder {
	return m.recorder
}

// Stream mocks base method.
func (m *MockStreamServiceServer) Stream(arg0 StreamService_StreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockStreamServiceServerMockRecorder) Stream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockStreamServiceServer)(nil).Stream), arg0)
}

// mustEmbedUnimplementedStreamServiceServer mocks base method.
func (m *MockStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamServiceServer")
}

// mustEmbedUnimplementedStreamServiceServer indicates an expected call of mustEmbedUnimplementedStreamServiceServer.
func (mr *MockStreamServiceServerMockRecorder) mustEmbedUnimplementedStreamServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamServiceServer", reflect.TypeOf((*MockStreamServiceServer)(nil).mustEmbedUnimplementedStreamServiceServer))
}

// MockUnsafeStreamServiceServer is a mock of UnsafeStreamServiceServer interface.
type MockUnsafeStreamServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStreamServiceServerMockRecorder
}

// MockUnsafeStreamServiceServerMockRecorder is the mock recorder for MockUnsafeStreamServiceServer.
type MockUnsafeStreamServiceServerMockRecorder struct {
	mock *MockUnsafeStreamServiceServer
}

// NewMockUnsafeStreamServiceServer creates a new mock instance.
func NewMockUnsafeStreamServiceServer(ctrl *gomock.Controller) *MockUnsafeStreamServiceServer {
	mock := &MockUnsafeStreamServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStreamServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStreamServiceServer) EXPECT() *MockUnsafeStreamServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStreamServiceServer mocks base method.
func (m *MockUnsafeStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamServiceServer")
}

// mustEmbedUnimplementedStreamServiceServer indicates an expected call of mustEmbedUnimplementedStreamServiceServer.
func (mr *MockUnsafeStreamServiceServerMockRecorder) mustEmbedUnimplementedStreamServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamServiceServer", reflect.TypeOf((*MockUnsafeStreamServiceServer)(nil).mustEmbedUnimplementedStreamServiceServer))
}

// MockStreamService_StreamServer is a mock of StreamService_StreamServer interface.
type MockStreamService_StreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamService_StreamServerMockRecorder
}

// MockStreamService_StreamServerMockRecorder is the mock recorder for MockStreamService_StreamServer.
type MockStreamService_StreamServerMockRecorder struct {
	mock *MockStreamService_StreamServer
}

// NewMockStreamService_StreamServer creates a new mock instance.
func NewMockStreamService_StreamServer(ctrl *gomock.Controller) *MockStreamService_StreamServer {
	mock := &MockStreamService_StreamServer{ctrl: ctrl}
	mock.recorder = &MockStreamService_StreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamService_StreamServer) EXPECT() *MockStreamService_StreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStreamService_StreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamService_StreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamService_StreamServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockStreamService_StreamServer) Recv() (*v1.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreamService_StreamServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreamService_StreamServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamService_StreamServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamService_StreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamService_StreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreamService_StreamServer) Send(arg0 *Ack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamService_StreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamService_StreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockStreamService_StreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockStreamService_StreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStreamService_StreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreamService_StreamServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamService_StreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamService_StreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockStreamService_StreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockStreamService_StreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStreamService_StreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockStreamService_StreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockStreamService_StreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStreamService_StreamServer)(nil).SetTrailer), arg0)
}
