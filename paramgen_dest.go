// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package grpcclient

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	DestConfigMaxDowntime        = "maxDowntime"
	DestConfigMtlsCaCertPath     = "mtls.ca.certPath"
	DestConfigMtlsClientCertPath = "mtls.client.certPath"
	DestConfigMtlsClientKeyPath  = "mtls.client.keyPath"
	DestConfigMtlsDisabled       = "mtls.disabled"
	DestConfigRateLimit          = "rateLimit"
	DestConfigReconnectDelay     = "reconnectDelay"
	DestConfigUrl                = "url"
)

func (DestConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		DestConfigMaxDowntime: {
			Default:     "10m",
			Description: "max downtime accepted for the server to be off.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		DestConfigMtlsCaCertPath: {
			Default:     "",
			Description: "the root CA certificate path.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		DestConfigMtlsClientCertPath: {
			Default:     "",
			Description: "the client certificate path.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		DestConfigMtlsClientKeyPath: {
			Default:     "",
			Description: "the client private key path.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		DestConfigMtlsDisabled: {
			Default:     "false",
			Description: "option to disable mTLS secure connection, set it to `true` for an insecure connection.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		DestConfigRateLimit: {
			Default:     "0",
			Description: "the bandwidth limit in bytes/second, use \"0\" to disable rate limiting.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{
				config.ValidationGreaterThan{V: -1},
			},
		},
		DestConfigReconnectDelay: {
			Default:     "5s",
			Description: "delay between each gRPC request retry.",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		DestConfigUrl: {
			Default:     "",
			Description: "url to gRPC server",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
